/*
	This script demonstrates the usage of the variant type and multiple return values.
	A list of highscore entries of a game is simulated.
	A user can query the scores list with the get_score function.
	In an input promt the user specifies first the column to evaluate.
	E. g. to query the score of the player Hans, first enter 1 to specify the name column.
	Then enter "Hans".
	By the usage of the variant type the same function can be used
	for querying columns with different data types.
	
	The selected set is returned by using multiple return values.
	This allows a direct assignment to the result variables instead of returning a list.
*/

function set_score: (list, int, string, int, bool) -> ();
set_score {list dict, int id, string name, int score, bool validated} = {
	list entry;
	entry = <list::>;
	list_add(entry, id);		// column index 0
	list_add(entry, name);		// column index 1
	list_add(entry, score);		// column index 2
	list_add(entry, validated);	// column index 3
	list_add(dict, entry);
};

function get_score: (list, int, variant) -> (int, string, int, bool);
get_score {list dict, int key_index, variant key} = {
	list result;
	result = <list:-1, "", 0, false:>;
	int i;
	i = 0;
	<loop:{
		<if:key == list_get(list_get(dict, i),key_index):{
			result = list_get(dict, i);
			break;
		}:>

		i = i + 1;
		<if:i >= list_size(dict):{break;}:>
	}:>

	return {list_get(result, 0), list_get(result, 1), list_get(result, 2), list_get(result, 3)};
};

list scores;
scores = <list::>;
set_score(scores, 1, "Peter", 100, true);
set_score(scores, 2, "Lukas", 110, true);
set_score(scores, 3, "Klaus", 130, false);
set_score(scores, 4, "Hans", 80, true);
println(scores);

println("Enter a column number to compare: (0) int id, (1) string name, (2) int score, (3) bool validated");
int column;
column = str_to_dec(readln());

println("Enter a key");
variant r_key;
<if:column == 1:{
	r_key = readln();
}:>
<if:column == 0 || column == 2:{
	r_key = str_to_dec(readln());
}:>
<if:column == 3:{
	r_key = str_to_bool(readln());
}:>

{int r_id, string r_name, int r_score, bool r_validated} = get_score(scores, column, r_key);

<if:r_validated == true:{
	println("Score: " + r_score + " (" + r_name + ")");
}:
else:{
	println("Score not validated...");
}:>

